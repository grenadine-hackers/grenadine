/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/proposals": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.proposals.id"];
          created_at?: parameters["rowFilter.proposals.created_at"];
          date?: parameters["rowFilter.proposals.date"];
          slot?: parameters["rowFilter.proposals.slot"];
          user?: parameters["rowFilter.proposals.user"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["proposals"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** proposals */
          proposals?: definitions["proposals"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.proposals.id"];
          created_at?: parameters["rowFilter.proposals.created_at"];
          date?: parameters["rowFilter.proposals.date"];
          slot?: parameters["rowFilter.proposals.slot"];
          user?: parameters["rowFilter.proposals.user"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.proposals.id"];
          created_at?: parameters["rowFilter.proposals.created_at"];
          date?: parameters["rowFilter.proposals.date"];
          slot?: parameters["rowFilter.proposals.slot"];
          user?: parameters["rowFilter.proposals.user"];
        };
        body: {
          /** proposals */
          proposals?: definitions["proposals"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  proposals: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: date */
    date?: string;
    /** Format: character varying */
    slot?: string;
    /** Format: json */
    user?: unknown;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description proposals */
  "body.proposals": definitions["proposals"];
  /** Format: uuid */
  "rowFilter.proposals.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.proposals.created_at": string;
  /** Format: date */
  "rowFilter.proposals.date": string;
  /** Format: character varying */
  "rowFilter.proposals.slot": string;
  /** Format: json */
  "rowFilter.proposals.user": string;
}

export interface operations {}

export interface external {}
